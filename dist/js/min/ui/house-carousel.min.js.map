{"version":3,"file":"house-carousel.min.js","names":["createHouseCardHTML","house","icon","popular","label","toLowerCase","new","deal","labelClass","replace","type","name","image","price","toLocaleString","user","avatar","location","initHouseCarousel","carousel","document","getElementById","filterButtons","querySelectorAll","scroller","querySelector","btnPrev","btnNext","allData","isDown","startX","scrollLeft","activeFilter","syncButtons","maxScroll","scrollWidth","clientWidth","canScrollPrev","canScrollNext","disabled","classList","toggle","renderHouses","list","innerHTML","map","join","requestAnimationFrame","async","res","fetch","ok","Error","json","forEach","btn","addEventListener","textContent","trim","b","isActive","listToRender","filter","h","getStepSize","card","gap","parseFloat","getComputedStyle","offsetWidth","scrollStep","dir","scrollBy","left","behavior","e","add","pageX","offsetLeft","body","style","userSelect","stopDragging","remove","preventDefault","walk","window","setupControls","err","console","error","initialize"],"sources":["ui/house-carousel.js"],"mappings":"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","ignoreList":[],"sourcesContent":["/**\r\n * Creates the HTML for a single house card.\r\n * @param {object} house - The house data object.\r\n * @returns {string} The HTML string for the card.\r\n */\r\nconst createHouseCardHTML = house => {\r\n  const iconMap = {\r\n    popular: 'icon-popular',\r\n    'new house': 'icon-house',\r\n    'best deals': 'icon-wallet',\r\n  };\r\n  const labelMap = {\r\n    popular: 'Popular',\r\n    'new': 'New house',\r\n    'deal': 'Best deals',\r\n  };\r\n  const icon = iconMap[house.label.toLowerCase()] || 'icon-house';\r\n  const label = labelMap[house.label.toLowerCase()] || 'New House';\r\n  const labelClass = house.label.toLowerCase().replace(' ', '-');\r\n\r\n  return `\r\n    <div class=\"house-card\" data-type=\"${house.type}\">\r\n      <div class=\"house-card__image\">\r\n        <img alt=\"${house.name}\" src=\"${house.image}\" />\r\n        <div class=\"label label--${labelClass}\">\r\n          <svg><use href=\"assets/icons/icons.svg#${icon}\"></use></svg>\r\n          ${label}\r\n        </div>\r\n      </div>\r\n      <div class=\"house-card__legend\">\r\n        <h3 class=\"house-card__name\">${house.name}</h3>\r\n        <p class=\"house-card__price\">$${house.price.toLocaleString('es-AR')}</p>\r\n      </div>\r\n      <div class=\"house-card__user\">\r\n        <div class=\"house-card__user-icon\">\r\n          <img alt=\"${house.user}\" src=\"${house.avatar}\" />\r\n        </div>\r\n        <div class=\"house-card__user-text\">\r\n          <p class=\"house-card__username\">${house.user}</p>\r\n          <p class=\"house-card__location\">${house.location}</p>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  `;\r\n};\r\n\r\nexport default function initHouseCarousel() {\r\n  // --- Element Selection ---\r\n  const carousel = document.getElementById('houseCarousel');\r\n  const filterButtons = document.querySelectorAll('.featured-house__nav__filters button');\r\n  const scroller = document.querySelector('.featured-house__carousel-wrapper');\r\n  const [btnPrev, btnNext] = document.querySelectorAll('.featured-house__nav__pagination .btn-round');\r\n\r\n  let allData = [];\r\n  let isDown = false, startX = 0, scrollLeft = 0;\r\n  let activeFilter = '';\r\n\r\n  const syncButtons = () => {\r\n    const maxScroll = scroller.scrollWidth - scroller.clientWidth;\r\n    \r\n    const canScrollPrev = scroller.scrollLeft > 1;\r\n    const canScrollNext = scroller.scrollLeft < maxScroll - 1;\r\n\r\n    btnPrev.disabled = !canScrollPrev;\r\n    btnPrev.classList.toggle('btn--green', canScrollPrev);\r\n    btnPrev.classList.toggle('btn--transparent', !canScrollPrev);\r\n\r\n    btnNext.disabled = !canScrollNext;\r\n    btnNext.classList.toggle('btn--green', canScrollNext);\r\n    btnNext.classList.toggle('btn--transparent', !canScrollNext);\r\n  };\r\n\r\n  const renderHouses = (list) => {\r\n    carousel.innerHTML = list.map(createHouseCardHTML).join('');\r\n    // Use requestAnimationFrame to ensure the DOM has updated before syncing.\r\n    requestAnimationFrame(syncButtons);\r\n  };\r\n\r\n  const setupFiltering = () => {\r\n    filterButtons.forEach(btn => {\r\n      btn.addEventListener('click', () => {\r\n        const type = btn.textContent.trim().toLowerCase();\r\n        \r\n        // Deactivate filter if the active one is clicked again.\r\n        activeFilter = (activeFilter === type) ? '' : type;\r\n\r\n        filterButtons.forEach(b => {\r\n          const isActive = b.textContent.trim().toLowerCase() === activeFilter;\r\n          b.classList.toggle('btn--light-green', isActive);\r\n          b.classList.toggle('btn--light-green--borderless', isActive);\r\n          b.classList.toggle('btn--transparent', !isActive);\r\n        });\r\n\r\n        const listToRender = activeFilter ? allData.filter(h => h.type === activeFilter) : allData;\r\n        renderHouses(listToRender);\r\n      });\r\n    });\r\n  };\r\n\r\n  const setupControls = () => {\r\n    const getStepSize = () => {\r\n      const card = carousel.querySelector(\".house-card\");\r\n      if (!card) return scroller.clientWidth;\r\n      const gap = parseFloat(getComputedStyle(carousel).gap) || 0;\r\n      return card.offsetWidth + gap;\r\n    };\r\n    const scrollStep = (dir) => scroller.scrollBy({ left: dir * getStepSize(), behavior: 'smooth' });\r\n    btnPrev.addEventListener('click', () => scrollStep(-1));\r\n    btnNext.addEventListener('click', () => scrollStep(1));\r\n\r\n    // Drag-to-scroll\r\n    scroller.addEventListener('mousedown', e => {\r\n      isDown = true;\r\n      scroller.classList.add('dragging');\r\n      startX = e.pageX - scroller.offsetLeft;\r\n      scrollLeft = scroller.scrollLeft;\r\n      document.body.style.userSelect = 'none'; \r\n    });\r\n\r\n    const stopDragging = () => {\r\n      isDown = false;\r\n      scroller.classList.remove('dragging');\r\n      document.body.style.userSelect = ''; \r\n    };\r\n\r\n    scroller.addEventListener('mouseup', stopDragging);\r\n    scroller.addEventListener('mouseleave', stopDragging);\r\n\r\n    scroller.addEventListener('mousemove', e => {\r\n      if (!isDown) return;\r\n      e.preventDefault(); \r\n      const x = e.pageX - scroller.offsetLeft;\r\n      const walk = (x - startX) * 1.5;\r\n      scroller.scrollLeft = scrollLeft - walk;\r\n    });\r\n\r\n    // Sync buttons on scroll and resize\r\n    scroller.addEventListener('scroll', syncButtons);\r\n    window.addEventListener('resize', syncButtons);\r\n  };\r\n\r\n  const initialize = async () => {\r\n    try {\r\n      const res = await fetch('data/featured.json');\r\n      if (!res.ok) throw new Error('Failed to load house data.');\r\n      allData = await res.json();\r\n      renderHouses(allData);\r\n      setupFiltering();\r\n      setupControls();\r\n    } catch (err) {\r\n      console.error(err);\r\n      carousel.innerHTML = '<p class=\"error\">Could not load featured houses.</p>';\r\n    }\r\n  };\r\n\r\n  initialize();\r\n}"]}